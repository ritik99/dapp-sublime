{
  "version": "3.2",
  "log": [
    {
      "GovernanceTester": {
        "src": "contracts/mocks/GovernanceTester.sol:4",
        "version": {
          "withMetadata": "1c86c233fbe360c345e873eaaa8f763730f7e58f43c4e3ab0706a5b6ce01544c",
          "withoutMetadata": "f133b6dff4840ab8ad62660a217d91faa8bca1cc693d7cde4c4fe17b0b943dd6",
          "linkedWithoutMetadata": "f133b6dff4840ab8ad62660a217d91faa8bca1cc693d7cde4c4fe17b0b943dd6"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "(address,uint256)",
          "update(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "GovernanceTester",
            "src": "contracts/mocks/GovernanceTester.sol:15"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "GovernanceTester",
              "label": "gov",
              "type": "t_address",
              "src": "contracts/mocks/GovernanceTester.sol:5"
            },
            {
              "contract": "GovernanceTester",
              "label": "value",
              "type": "t_uint256",
              "src": "contracts/mocks/GovernanceTester.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "FluxAggregator": {
        "src": "contracts/mocks/FluxAggregator.sol:4",
        "version": {
          "withMetadata": "1ba679d4ea1a7a067ddc0bac53f151dda718243730cb532266c0ebcd58300430",
          "withoutMetadata": "78c1ab5450ca22cfaa86c6be8f8100772c673fbfb52e5974c40e0a4046a0270e",
          "linkedWithoutMetadata": "78c1ab5450ca22cfaa86c6be8f8100772c673fbfb52e5974c40e0a4046a0270e"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setValue(int256)",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "version",
            "src": "contracts/mocks/FluxAggregator.sol:5"
          },
          {
            "kind": "state-variable-assignment",
            "name": "value",
            "src": "contracts/mocks/FluxAggregator.sol:9"
          },
          {
            "kind": "state-variable-assignment",
            "name": "latestRoundId",
            "src": "contracts/mocks/FluxAggregator.sol:10"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "FluxAggregator",
              "label": "version",
              "type": "t_uint256",
              "src": "contracts/mocks/FluxAggregator.sol:5"
            },
            {
              "contract": "FluxAggregator",
              "label": "decimals",
              "type": "t_uint8",
              "src": "contracts/mocks/FluxAggregator.sol:6"
            },
            {
              "contract": "FluxAggregator",
              "label": "description",
              "type": "t_string_storage",
              "src": "contracts/mocks/FluxAggregator.sol:7"
            },
            {
              "contract": "FluxAggregator",
              "label": "value",
              "type": "t_int256",
              "src": "contracts/mocks/FluxAggregator.sol:9"
            },
            {
              "contract": "FluxAggregator",
              "label": "latestRoundId",
              "type": "t_uint80",
              "src": "contracts/mocks/FluxAggregator.sol:10"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_int256": {
              "label": "int256"
            },
            "t_uint80": {
              "label": "uint80"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "Migrations": {
        "src": "contracts/Migrations.sol:4",
        "version": {
          "withMetadata": "a7d62efff9970a5af2d05c47fcb48cfac044ce06e9f85da52f4bc8e74bee9cab",
          "withoutMetadata": "5e9a930d422fc2cdb9120658e99d215c882773554764e974cf2cac295f8bfb2c",
          "linkedWithoutMetadata": "5e9a930d422fc2cdb9120658e99d215c882773554764e974cf2cac295f8bfb2c"
        },
        "inherit": [],
        "libraries": [],
        "methods": [
          "setCompleted(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "owner",
            "src": "contracts/Migrations.sol:5"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Migrations",
              "label": "owner",
              "type": "t_address",
              "src": "contracts/Migrations.sol:5"
            },
            {
              "contract": "Migrations",
              "label": "last_completed_migration",
              "type": "t_uint256",
              "src": "contracts/Migrations.sol:6"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "AggregatorV3Interface": {
        "src": "@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "decimals()",
          "description()",
          "version()",
          "getRoundData(uint80)",
          "latestRoundData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:19",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:74"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SafeMathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/math/SafeMathUpgradeable.sol:18",
        "version": {
          "withMetadata": "30a0813b7e782d62d387e587b86eb7aa03b8812abc5ba5b9c2e6477b05e359b2",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:20",
        "inherit": [],
        "libraries": [
          "AddressUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:25"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/Initializable.sol:30"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:16",
        "inherit": [
          "PausableUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20PausableUpgradeable.sol:37"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:34",
        "version": {
          "withMetadata": "09bbec8f8d58f8c182312faad3e7e21762e1e4dd22be75a570e2ed45f570655c",
          "withoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1",
          "linkedWithoutMetadata": "922eb2c24562e6fc8700766d9bff533b21cc13a1623a26a81e449e6ec4ff62b1"
        },
        "inherit": [
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMathUpgradeable"
        ],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:45"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)44_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:312"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_array(t_uint256)44_storage": {
              "label": "uint256[44]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AddressUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol:8",
        "version": {
          "withMetadata": "58a4ec29bf6803caed66dc318cfc5a61e0bf603f05813bb4e826f20efb816d51",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:31"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:18",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:26"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:19"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ECDSA": {
        "src": "@openzeppelin/contracts/cryptography/ECDSA.sol:11",
        "version": {
          "withMetadata": "41a2a8eb95187e91091294056879f1e2b0dfbb6565008cd2f22d75f91ba10231",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeMath": {
        "src": "@openzeppelin/contracts/math/SafeMath.sol:18",
        "version": {
          "withMetadata": "27a35e8f635ef423daa6b38b71a45ab28974fc663fd73d59173a4536fc09d809",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Proxy": {
        "src": "@openzeppelin/contracts/proxy/Proxy.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [
          "()",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TransparentUpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:28",
        "version": {
          "withMetadata": "a76841e1d58b14183933a2e8cf231f58dc45c2d8f6f407c822b7bfd08027475e",
          "withoutMetadata": "a76841e1d58b14183933a2e8cf231f58dc45c2d8f6f407c822b7bfd08027475e",
          "linkedWithoutMetadata": "a76841e1d58b14183933a2e8cf231f58dc45c2d8f6f407c822b7bfd08027475e"
        },
        "inherit": [
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,address,bytes)",
          "admin()",
          "implementation()",
          "changeAdmin(address)",
          "upgradeTo(address)",
          "upgradeToAndCall(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "TransparentUpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/TransparentUpgradeableProxy.sol:33"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "UpgradeableProxy": {
        "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:17",
        "version": {
          "withMetadata": "467e7f9dee363e51f0cefb27dc53dde5bee634b71fb7eaefae1d6789a54ee8bb",
          "withoutMetadata": "467e7f9dee363e51f0cefb27dc53dde5bee634b71fb7eaefae1d6789a54ee8bb",
          "linkedWithoutMetadata": "467e7f9dee363e51f0cefb27dc53dde5bee634b71fb7eaefae1d6789a54ee8bb"
        },
        "inherit": [
          "Proxy"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "UpgradeableProxy",
            "src": "@openzeppelin/contracts/proxy/UpgradeableProxy.sol:24"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "contracts/mocks/yVault/yVault.sol:14",
        "version": {
          "withMetadata": "9d881ed88e6f77d2d1e017150f50e5b12baf1796da3a14be8d3c7bb03a835344",
          "withoutMetadata": "3c1a0056da312afcd64a2bae1fc46875c39be7a47c3dffbf9b6921d46745c1b9",
          "linkedWithoutMetadata": "3c1a0056da312afcd64a2bae1fc46875c39be7a47c3dffbf9b6921d46745c1b9"
        },
        "inherit": [
          "Context"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/mocks/yVault/yVault.sol:17"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "contracts/mocks/yVault/yVault.sol:19"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "contracts/mocks/yVault/yVault.sol:21"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeERC20": {
        "src": "contracts/mocks/yVault/yVault.sol:143",
        "version": {
          "withMetadata": "e301b2688d80bf0ed40235333ded82e8eda595cee4f63db5f8a41af3aac89080",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeMath",
          "Address"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "5f4eb5644da07fb8d5b8a2cd6227b73f15eae48b724a1c3385aa6f3e2d585d96",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:167"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ReentrancyGuard": {
        "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:21",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ReentrancyGuard",
            "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:38"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ReentrancyGuard",
              "label": "_status",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/utils/ReentrancyGuard.sol:36"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3Pool": {
        "src": "@uniswap/v3-core/contracts/interfaces/IUniswapV3Pool.sol:15",
        "inherit": [
          "IUniswapV3PoolEvents",
          "IUniswapV3PoolOwnerActions",
          "IUniswapV3PoolActions",
          "IUniswapV3PoolDerivedState",
          "IUniswapV3PoolState",
          "IUniswapV3PoolImmutables"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initialize(uint160)",
          "mint(address,int24,int24,uint128,bytes)",
          "collect(address,int24,int24,uint128,uint128)",
          "burn(int24,int24,uint128)",
          "swap(address,bool,int256,uint160,bytes)",
          "flash(address,uint256,uint256,bytes)",
          "increaseObservationCardinalityNext(uint16)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolDerivedState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolDerivedState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "observe(uint32[])",
          "snapshotCumulativesInside(int24,int24)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolEvents": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolEvents.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolImmutables": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolImmutables.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "factory()",
          "token0()",
          "token1()",
          "fee()",
          "tickSpacing()",
          "maxLiquidityPerTick()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolOwnerActions": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolOwnerActions.sol:6",
        "inherit": [],
        "libraries": [],
        "methods": [
          "setFeeProtocol(uint8,uint8)",
          "collectProtocol(address,uint128,uint128)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IUniswapV3PoolState": {
        "src": "@uniswap/v3-core/contracts/interfaces/pool/IUniswapV3PoolState.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "slot0()",
          "feeGrowthGlobal0X128()",
          "feeGrowthGlobal1X128()",
          "protocolFees()",
          "liquidity()",
          "ticks(int24)",
          "tickBitmap(int16)",
          "positions(bytes32)",
          "observations(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "FullMath": {
        "src": "@uniswap/v3-core/contracts/libraries/FullMath.sol:7",
        "version": {
          "withMetadata": "ce0d7d53eb52c6bcd6d76505962ffdb93fc05cd5fcd5459e97a0c8a180a5b59e",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LowGasSafeMath": {
        "src": "@uniswap/v3-core/contracts/libraries/LowGasSafeMath.sol:6",
        "version": {
          "withMetadata": "a11ea178e88ae6a227ff2409a843f2a9fa87b19317b0ca2b8b430e1c1cd0b512",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "TickMath": {
        "src": "@uniswap/v3-core/contracts/libraries/TickMath.sol:7",
        "version": {
          "withMetadata": "8c600e174e486e40b33f0ddee689187e2e4cb5aebebb968f94ca2586ad6d202a",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OracleLibrary": {
        "src": "@uniswap/v3-periphery/contracts/libraries/OracleLibrary.sol:12",
        "version": {
          "withMetadata": "2c1dafa733ce27cae4be651562be71e5d59c6fafafff7db53fe6d9dfbb357402",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "TickMath",
          "FullMath"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "PoolAddress": {
        "src": "@uniswap/v3-periphery/contracts/libraries/PoolAddress.sol:5",
        "version": {
          "withMetadata": "f29e736c244e4dd9ead594d65217b56f388194bab706a8e4c7c7daaa969a35e9",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "CreditLine": {
        "src": "contracts/CreditLine/CreditLine.sol:19",
        "version": {
          "withMetadata": "52653ca65aec4efa23cd4a1050a11d569b265bc9a331fcd97b066866a50ec21d",
          "withoutMetadata": "662f8e082cec354ea582d1a7abb3aa79cf2fab9f0f51fa691696b88ddce94fcf",
          "linkedWithoutMetadata": "662f8e082cec354ea582d1a7abb3aa79cf2fab9f0f51fa691696b88ddce94fcf"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ReentrancyGuard"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address,address,address,address,uint256,address,uint256)",
          "updateDefaultStrategy(address)",
          "updatePriceOracle(address)",
          "updateSavingsAccount(address)",
          "updateProtocolFeeFraction(uint256)",
          "updateProtocolFeeCollector(address)",
          "updateStrategyRegistry(address)",
          "updateLiquidatorRewardFraction(uint256)",
          "calculateInterest(uint256,uint256,uint256)",
          "calculateInterestAccrued(uint256)",
          "calculateCurrentDebt(uint256)",
          "calculateBorrowableAmount(uint256)",
          "request(address,uint256,uint256,bool,uint256,address,address,bool)",
          "accept(uint256)",
          "depositCollateral(uint256,uint256,address,bool)",
          "borrow(uint256,uint256)",
          "repay(uint256,uint256,bool)",
          "close(uint256)",
          "calculateCurrentCollateralRatio(uint256)",
          "calculateTotalCollateralTokens(uint256)",
          "withdrawCollateral(uint256,uint256,bool)",
          "withdrawableCollateral(uint256)",
          "liquidate(uint256,bool)",
          "borrowTokensToLiquidate(uint256)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CreditLine",
              "label": "creditLineCounter",
              "type": "t_uint256",
              "src": "contracts/CreditLine/CreditLine.sol:36"
            },
            {
              "contract": "CreditLine",
              "label": "collateralShareInStrategy",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "src": "contracts/CreditLine/CreditLine.sol:64"
            },
            {
              "contract": "CreditLine",
              "label": "creditLineVariables",
              "type": "t_mapping(t_uint256,t_struct(CreditLineVariables)5385_storage)",
              "src": "contracts/CreditLine/CreditLine.sol:69"
            },
            {
              "contract": "CreditLine",
              "label": "creditLineConstants",
              "type": "t_mapping(t_uint256,t_struct(CreditLineConstants)5404_storage)",
              "src": "contracts/CreditLine/CreditLine.sol:74"
            },
            {
              "contract": "CreditLine",
              "label": "savingsAccount",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:79"
            },
            {
              "contract": "CreditLine",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:84"
            },
            {
              "contract": "CreditLine",
              "label": "strategyRegistry",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:89"
            },
            {
              "contract": "CreditLine",
              "label": "defaultStrategy",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:94"
            },
            {
              "contract": "CreditLine",
              "label": "protocolFeeFraction",
              "type": "t_uint256",
              "src": "contracts/CreditLine/CreditLine.sol:100"
            },
            {
              "contract": "CreditLine",
              "label": "protocolFeeCollector",
              "type": "t_address",
              "src": "contracts/CreditLine/CreditLine.sol:105"
            },
            {
              "contract": "CreditLine",
              "label": "liquidatorRewardFraction",
              "type": "t_uint256",
              "src": "contracts/CreditLine/CreditLine.sol:111"
            }
          ],
          "types": {
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_uint256,t_struct(CreditLineVariables)5385_storage)": {
              "label": "mapping(uint256 => struct CreditLine.CreditLineVariables)"
            },
            "t_struct(CreditLineVariables)5385_storage": {
              "label": "struct CreditLine.CreditLineVariables",
              "members": [
                {
                  "label": "status",
                  "type": "t_enum(CreditLineStatus)5366"
                },
                {
                  "label": "principal",
                  "type": "t_uint256"
                },
                {
                  "label": "totalInterestRepaid",
                  "type": "t_uint256"
                },
                {
                  "label": "lastPrincipalUpdateTime",
                  "type": "t_uint256"
                },
                {
                  "label": "interestAccruedTillLastPrincipalUpdate",
                  "type": "t_uint256"
                },
                {
                  "label": "collateralAmount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(CreditLineStatus)5366": {
              "label": "enum CreditLine.CreditLineStatus",
              "members": [
                "NOT_CREATED",
                "REQUESTED",
                "ACTIVE",
                "CLOSED",
                "CANCELLED",
                "LIQUIDATED"
              ]
            },
            "t_mapping(t_uint256,t_struct(CreditLineConstants)5404_storage)": {
              "label": "mapping(uint256 => struct CreditLine.CreditLineConstants)"
            },
            "t_struct(CreditLineConstants)5404_storage": {
              "label": "struct CreditLine.CreditLineConstants",
              "members": [
                {
                  "label": "lender",
                  "type": "t_address"
                },
                {
                  "label": "borrower",
                  "type": "t_address"
                },
                {
                  "label": "borrowLimit",
                  "type": "t_uint256"
                },
                {
                  "label": "idealCollateralRatio",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowRate",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowAsset",
                  "type": "t_address"
                },
                {
                  "label": "collateralAsset",
                  "type": "t_address"
                },
                {
                  "label": "autoLiquidation",
                  "type": "t_bool"
                },
                {
                  "label": "requestByLender",
                  "type": "t_bool"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Extension": {
        "src": "contracts/Pool/Extension.sol:16",
        "version": {
          "withMetadata": "1c81c867715f0f8602c5b3ac2a0c95f468a3a05cc857662eda413166f22e7098",
          "withoutMetadata": "bfad899d0fc107c299d106386bc62b4d73cf680e42b43a7fee53ae29491ca6c1",
          "linkedWithoutMetadata": "bfad899d0fc107c299d106386bc62b4d73cf680e42b43a7fee53ae29491ca6c1"
        },
        "inherit": [
          "IExtension",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "initialize(address,uint256)",
          "initializePoolExtension(uint128)",
          "requestExtension(address)",
          "removeVotes(address,address,uint256)",
          "voteOnExtension(address)",
          "closePoolExtension()",
          "updateVotingPassRatio(uint256)",
          "updatePoolFactory(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Extension",
              "label": "extensions",
              "type": "t_mapping(t_address,t_struct(ExtensionVariables)8387_storage)",
              "src": "contracts/Pool/Extension.sol:30"
            },
            {
              "contract": "Extension",
              "label": "poolFactory",
              "type": "t_contract(IPoolFactory)17816",
              "src": "contracts/Pool/Extension.sol:31"
            },
            {
              "contract": "Extension",
              "label": "votingPassRatio",
              "type": "t_uint256",
              "src": "contracts/Pool/Extension.sol:35"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(ExtensionVariables)8387_storage)": {
              "label": "mapping(address => struct Extension.ExtensionVariables)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(ExtensionVariables)8387_storage": {
              "label": "struct Extension.ExtensionVariables",
              "members": [
                {
                  "label": "hasExtensionPassed",
                  "type": "t_bool"
                },
                {
                  "label": "extensionVoteEndTime",
                  "type": "t_uint64"
                },
                {
                  "label": "repaymentInterval",
                  "type": "t_uint128"
                },
                {
                  "label": "lastVotedExtension",
                  "type": "t_mapping(t_address,t_uint256)"
                },
                {
                  "label": "totalExtensionSupport",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_uint128": {
              "label": "uint128"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_contract(IPoolFactory)17816": {
              "label": "contract IPoolFactory"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Pool": {
        "src": "contracts/Pool/Pool.sol:24",
        "version": {
          "withMetadata": "ab00bdb6577023ed24727f32524a025ed2b6551ef03ae9101a46624b7f5d4eb5",
          "withoutMetadata": "070b1b87f2247f18f38248c28b38cb30807c8ba77510e8c7760fcd143b7dc7fc",
          "linkedWithoutMetadata": "070b1b87f2247f18f38248c28b38cb30807c8ba77510e8c7760fcd143b7dc7fc"
        },
        "inherit": [
          "ReentrancyGuard",
          "IPool",
          "ERC20PausableUpgradeable",
          "PausableUpgradeable",
          "ERC20Upgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath",
          "SavingsAccountUtil"
        ],
        "methods": [
          "initialize(uint256,uint256,address,address,address,uint256,uint256,uint256,address,uint256,bool,address,uint256,uint256)",
          "depositCollateral(uint256,bool)",
          "addCollateralInMarginCall(address,uint256,bool)",
          "withdrawBorrowedAmount()",
          "lend(address,uint256,bool)",
          "cancelPool()",
          "liquidateCancelPenalty(bool,bool)",
          "terminatePool()",
          "closeLoan()",
          "withdrawLiquidity()",
          "requestMarginCall()",
          "interestToPay()",
          "calculateCollateralRatio(uint256,uint256)",
          "getCurrentCollateralRatio()",
          "getCurrentCollateralRatio(address)",
          "liquidatePool(bool,bool,bool)",
          "liquidateForLender(address,bool,bool,bool)",
          "correspondingBorrowTokens(uint256,address,uint256)",
          "interestPerSecond(uint256)",
          "interestPerPeriod(uint256)",
          "calculateCurrentPeriod()",
          "calculateRepaymentWithdrawable(address)",
          "withdrawRepayment()",
          "getMarginCallEndTime(address)",
          "getBalanceDetails(address)",
          "getLoanStatus()",
          "()",
          "getEquivalentTokens(address,address,uint256)",
          "borrower()",
          "totalSupply()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Pool",
              "label": "poolFactory",
              "type": "t_address",
              "src": "contracts/Pool/Pool.sol:37"
            },
            {
              "contract": "Pool",
              "label": "lenders",
              "type": "t_mapping(t_address,t_struct(LendingDetails)8968_storage)",
              "src": "contracts/Pool/Pool.sol:71"
            },
            {
              "contract": "Pool",
              "label": "poolConstants",
              "type": "t_struct(PoolConstants)8993_storage",
              "src": "contracts/Pool/Pool.sol:76"
            },
            {
              "contract": "Pool",
              "label": "poolVariables",
              "type": "t_struct(PoolVariables)9002_storage",
              "src": "contracts/Pool/Pool.sol:81"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_struct(LendingDetails)8968_storage)": {
              "label": "mapping(address => struct Pool.LendingDetails)"
            },
            "t_struct(LendingDetails)8968_storage": {
              "label": "struct Pool.LendingDetails",
              "members": [
                {
                  "label": "interestWithdrawn",
                  "type": "t_uint256"
                },
                {
                  "label": "marginCallEndTime",
                  "type": "t_uint256"
                },
                {
                  "label": "extraLiquidityShares",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_struct(PoolConstants)8993_storage": {
              "label": "struct Pool.PoolConstants",
              "members": [
                {
                  "label": "borrower",
                  "type": "t_address"
                },
                {
                  "label": "borrowAmountRequested",
                  "type": "t_uint256"
                },
                {
                  "label": "loanStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "loanWithdrawalDeadline",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowAsset",
                  "type": "t_address"
                },
                {
                  "label": "idealCollateralRatio",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowRate",
                  "type": "t_uint256"
                },
                {
                  "label": "noOfRepaymentIntervals",
                  "type": "t_uint256"
                },
                {
                  "label": "repaymentInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "collateralAsset",
                  "type": "t_address"
                },
                {
                  "label": "poolSavingsStrategy",
                  "type": "t_address"
                },
                {
                  "label": "lenderVerifier",
                  "type": "t_address"
                }
              ]
            },
            "t_struct(PoolVariables)9002_storage": {
              "label": "struct Pool.PoolVariables",
              "members": [
                {
                  "label": "baseLiquidityShares",
                  "type": "t_uint256"
                },
                {
                  "label": "extraLiquidityShares",
                  "type": "t_uint256"
                },
                {
                  "label": "loanStatus",
                  "type": "t_enum(LoanStatus)8959"
                },
                {
                  "label": "penaltyLiquidityAmount",
                  "type": "t_uint256"
                }
              ]
            },
            "t_enum(LoanStatus)8959": {
              "label": "enum Pool.LoanStatus",
              "members": [
                "COLLECTION",
                "ACTIVE",
                "CLOSED",
                "CANCELLED",
                "DEFAULTED",
                "TERMINATED"
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PoolFactory": {
        "src": "contracts/Pool/PoolFactory.sol:16",
        "version": {
          "withMetadata": "05c14f95011f4fcb694045e5e7f1ddca2bb1f8f44456582d91aa328c2ef821c3",
          "withoutMetadata": "41a19a205530b0b6b3c721342baba9207c526b6a7d016ba1d7e045d86cec2efa",
          "linkedWithoutMetadata": "41a19a205530b0b6b3c721342baba9207c526b6a7d016ba1d7e045d86cec2efa"
        },
        "inherit": [
          "IPoolFactory",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "initialize(address,uint256,uint256,uint256,bytes4,uint256,uint256,uint256,uint256,address,address)",
          "setImplementations(address,address,address,address,address,address,address)",
          "createPool(uint256,uint256,address,address,uint256,uint256,uint256,address,uint256,bool,bytes32,address,address)",
          "updateSupportedBorrowTokens(address,bool)",
          "updateSupportedCollateralTokens(address,bool)",
          "updatepoolInitFuncSelector(bytes4)",
          "updatePoolLogic(address)",
          "updateUserRegistry(address)",
          "updateStrategyRegistry(address)",
          "updateRepaymentImpl(address)",
          "updateNoStrategy(address)",
          "updatePriceoracle(address)",
          "updatedExtension(address)",
          "updateSavingsAccount(address)",
          "updateCollectionPeriod(uint256)",
          "updateLoanWithdrawalDuration(uint256)",
          "updateMarginCallDuration(uint256)",
          "updateMinBorrowFraction(uint256)",
          "updateLiquidatorRewardFraction(uint256)",
          "updatePoolCancelPenaltyMultiple(uint256)",
          "updateProtocolFeeFraction(uint256)",
          "updateProtocolFeeCollector(address)",
          "updatePoolSizeLimit(uint256,uint256)",
          "updateidealCollateralRatioLimit(uint256,uint256)",
          "updateBorrowRateLimit(uint256,uint256)",
          "updateRepaymentIntervalLimit(uint256,uint256)",
          "updateNoOfRepaymentIntervalsLimit(uint256,uint256)",
          "getProtocolFeeData()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PoolFactory",
              "label": "poolInitFuncSelector",
              "type": "t_bytes4",
              "src": "contracts/Pool/PoolFactory.sol:30"
            },
            {
              "contract": "PoolFactory",
              "label": "poolImpl",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:35"
            },
            {
              "contract": "PoolFactory",
              "label": "userRegistry",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:40"
            },
            {
              "contract": "PoolFactory",
              "label": "strategyRegistry",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:45"
            },
            {
              "contract": "PoolFactory",
              "label": "extension",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:50"
            },
            {
              "contract": "PoolFactory",
              "label": "repaymentImpl",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:55"
            },
            {
              "contract": "PoolFactory",
              "label": "priceOracle",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:60"
            },
            {
              "contract": "PoolFactory",
              "label": "savingsAccount",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:65"
            },
            {
              "contract": "PoolFactory",
              "label": "collectionPeriod",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:70"
            },
            {
              "contract": "PoolFactory",
              "label": "loanWithdrawalDuration",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:75"
            },
            {
              "contract": "PoolFactory",
              "label": "marginCallDuration",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:80"
            },
            {
              "contract": "PoolFactory",
              "label": "minBorrowFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:85"
            },
            {
              "contract": "PoolFactory",
              "label": "liquidatorRewardFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:90"
            },
            {
              "contract": "PoolFactory",
              "label": "poolCancelPenaltyMultiple",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:95"
            },
            {
              "contract": "PoolFactory",
              "label": "noStrategyAddress",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:100"
            },
            {
              "contract": "PoolFactory",
              "label": "protocolFeeFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/PoolFactory.sol:102"
            },
            {
              "contract": "PoolFactory",
              "label": "protocolFeeCollector",
              "type": "t_address",
              "src": "contracts/Pool/PoolFactory.sol:103"
            },
            {
              "contract": "PoolFactory",
              "label": "isBorrowToken",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Pool/PoolFactory.sol:108"
            },
            {
              "contract": "PoolFactory",
              "label": "isCollateralToken",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Pool/PoolFactory.sol:113"
            },
            {
              "contract": "PoolFactory",
              "label": "poolRegistry",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Pool/PoolFactory.sol:118"
            },
            {
              "contract": "PoolFactory",
              "label": "poolSizeLimit",
              "type": "t_struct(Limits)11756_storage",
              "src": "contracts/Pool/PoolFactory.sol:123"
            },
            {
              "contract": "PoolFactory",
              "label": "idealCollateralRatioLimit",
              "type": "t_struct(Limits)11756_storage",
              "src": "contracts/Pool/PoolFactory.sol:128"
            },
            {
              "contract": "PoolFactory",
              "label": "borrowRateLimit",
              "type": "t_struct(Limits)11756_storage",
              "src": "contracts/Pool/PoolFactory.sol:133"
            },
            {
              "contract": "PoolFactory",
              "label": "repaymentIntervalLimit",
              "type": "t_struct(Limits)11756_storage",
              "src": "contracts/Pool/PoolFactory.sol:138"
            },
            {
              "contract": "PoolFactory",
              "label": "noOfRepaymentIntervalsLimit",
              "type": "t_struct(Limits)11756_storage",
              "src": "contracts/Pool/PoolFactory.sol:143"
            }
          ],
          "types": {
            "t_bytes4": {
              "label": "bytes4"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_struct(Limits)11756_storage": {
              "label": "struct PoolFactory.Limits",
              "members": [
                {
                  "label": "min",
                  "type": "t_uint256"
                },
                {
                  "label": "max",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Repayments": {
        "src": "contracts/Pool/Repayments.sol:19",
        "version": {
          "withMetadata": "688cfdd91441514991d73d25defd24b5712f364f2988b0f2f878057352f9eca0",
          "withoutMetadata": "dce7605d1bdf53d1f0eb067969bfb723575d017f850b4a9ff790736307a36d28",
          "linkedWithoutMetadata": "dce7605d1bdf53d1f0eb067969bfb723575d017f850b4a9ff790736307a36d28"
        },
        "inherit": [
          "ReentrancyGuard",
          "IRepayment",
          "Initializable"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,uint256,uint256)",
          "updatePoolFactory(address)",
          "updateGracePeriodFraction(uint256)",
          "updateGracePenaltyRate(uint256)",
          "initializeRepayment(uint256,uint256,uint256,uint256,address)",
          "getInterestPerSecond(address)",
          "getInstalmentsCompleted(address)",
          "getInterestDueTillInstalmentDeadline(address)",
          "getNextInstalmentDeadline(address)",
          "getCurrentInstalmentInterval(address)",
          "getCurrentLoanInterval(address)",
          "isGracePenaltyApplicable(address)",
          "didBorrowerDefault(address)",
          "getInterestLeft(address)",
          "getInterestOverdue(address)",
          "repay(address,uint256)",
          "repayPrincipal(address payable)",
          "getTotalRepaidAmount(address)",
          "instalmentDeadlineExtended(address)",
          "getInterestCalculationVars(address)",
          "getGracePeriodFraction()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Repayments",
              "label": "poolFactory",
              "type": "t_contract(IPoolFactory)17816",
              "src": "contracts/Pool/Repayments.sol:26"
            },
            {
              "contract": "Repayments",
              "label": "gracePenaltyRate",
              "type": "t_uint256",
              "src": "contracts/Pool/Repayments.sol:37"
            },
            {
              "contract": "Repayments",
              "label": "gracePeriodFraction",
              "type": "t_uint256",
              "src": "contracts/Pool/Repayments.sol:38"
            },
            {
              "contract": "Repayments",
              "label": "repayVariables",
              "type": "t_mapping(t_address,t_struct(RepaymentVariables)13139_storage)",
              "src": "contracts/Pool/Repayments.sol:61"
            },
            {
              "contract": "Repayments",
              "label": "repayConstants",
              "type": "t_mapping(t_address,t_struct(RepaymentConstants)13156_storage)",
              "src": "contracts/Pool/Repayments.sol:66"
            }
          ],
          "types": {
            "t_contract(IPoolFactory)17816": {
              "label": "contract IPoolFactory"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(RepaymentVariables)13139_storage)": {
              "label": "mapping(address => struct Repayments.RepaymentVariables)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(RepaymentVariables)13139_storage": {
              "label": "struct Repayments.RepaymentVariables",
              "members": [
                {
                  "label": "repaidAmount",
                  "type": "t_uint256"
                },
                {
                  "label": "isLoanExtensionActive",
                  "type": "t_bool"
                },
                {
                  "label": "loanDurationCovered",
                  "type": "t_uint256"
                },
                {
                  "label": "loanExtensionPeriod",
                  "type": "t_uint256"
                }
              ]
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_struct(RepaymentConstants)13156_storage)": {
              "label": "mapping(address => struct Repayments.RepaymentConstants)"
            },
            "t_struct(RepaymentConstants)13156_storage": {
              "label": "struct Repayments.RepaymentConstants",
              "members": [
                {
                  "label": "numberOfTotalRepayments",
                  "type": "t_uint256"
                },
                {
                  "label": "gracePenaltyRate",
                  "type": "t_uint256"
                },
                {
                  "label": "gracePeriodFraction",
                  "type": "t_uint256"
                },
                {
                  "label": "loanDuration",
                  "type": "t_uint256"
                },
                {
                  "label": "repaymentInterval",
                  "type": "t_uint256"
                },
                {
                  "label": "borrowRate",
                  "type": "t_uint256"
                },
                {
                  "label": "loanStartTime",
                  "type": "t_uint256"
                },
                {
                  "label": "repayAsset",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PriceOracle": {
        "src": "contracts/PriceOracle.sol:12",
        "version": {
          "withMetadata": "e572c53e3aa2dcbc11f1cbea54c0d06cc5e17b5fda36b2c3396041ed58ae7c3b",
          "withoutMetadata": "944ce3fbdc69ba9fe795710b0d1edc6ef2309f382ed052d9604123c5cb1ea898",
          "linkedWithoutMetadata": "944ce3fbdc69ba9fe795710b0d1edc6ef2309f382ed052d9604123c5cb1ea898"
        },
        "inherit": [
          "IPriceOracle",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath",
          "OracleLibrary"
        ],
        "methods": [
          "initialize(address)",
          "getChainlinkLatestPrice(address,address)",
          "getUniswapLatestPrice(address,address)",
          "getLatestPrice(address,address)",
          "doesFeedExist(address,address)",
          "setChainlinkFeedAddress(address,address)",
          "setUniswapFeedAddress(address,address,address)",
          "setUniswapPriceAveragingPeriod(uint32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PriceOracle",
              "label": "uniswapPriceAveragingPeriod",
              "type": "t_uint32",
              "src": "contracts/PriceOracle.sol:15"
            },
            {
              "contract": "PriceOracle",
              "label": "chainlinkFeedAddresses",
              "type": "t_mapping(t_address,t_struct(PriceData)14617_storage)",
              "src": "contracts/PriceOracle.sol:23"
            },
            {
              "contract": "PriceOracle",
              "label": "decimals",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/PriceOracle.sol:24"
            },
            {
              "contract": "PriceOracle",
              "label": "uniswapPools",
              "type": "t_mapping(t_bytes32,t_address)",
              "src": "contracts/PriceOracle.sol:29"
            }
          ],
          "types": {
            "t_uint32": {
              "label": "uint32"
            },
            "t_mapping(t_address,t_struct(PriceData)14617_storage)": {
              "label": "mapping(address => struct PriceOracle.PriceData)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(PriceData)14617_storage": {
              "label": "struct PriceOracle.PriceData",
              "members": [
                {
                  "label": "decimals",
                  "type": "t_uint64"
                },
                {
                  "label": "oracle",
                  "type": "t_address"
                }
              ]
            },
            "t_uint64": {
              "label": "uint64"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_bytes32,t_address)": {
              "label": "mapping(bytes32 => address)"
            },
            "t_bytes32": {
              "label": "bytes32"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SublimeProxy": {
        "src": "contracts/Proxy.sol:6",
        "version": {
          "withMetadata": "9606ece078a331dabcdefe1c10cd8ec6d205c3dd272bbfadbf7a3f503d24eb2e",
          "withoutMetadata": "9606ece078a331dabcdefe1c10cd8ec6d205c3dd272bbfadbf7a3f503d24eb2e",
          "linkedWithoutMetadata": "9606ece078a331dabcdefe1c10cd8ec6d205c3dd272bbfadbf7a3f503d24eb2e"
        },
        "inherit": [
          "TransparentUpgradeableProxy",
          "UpgradeableProxy",
          "Proxy"
        ],
        "libraries": [],
        "methods": [
          "(address,address,bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SublimeProxy",
            "src": "contracts/Proxy.sol:7"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SavingsAccount": {
        "src": "contracts/SavingsAccount/SavingsAccount.sol:17",
        "version": {
          "withMetadata": "21290aee964cdd68855aea22d6889d73107d51e6aaccbf69f6781e3febfcc7d2",
          "withoutMetadata": "89b0f3c85a2fc68eae86a6ba6cc27a7066a926a2cf84577498bb944cfea4d812",
          "linkedWithoutMetadata": "89b0f3c85a2fc68eae86a6ba6cc27a7066a926a2cf84577498bb944cfea4d812"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "ISavingsAccount"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address,address)",
          "updateCreditLine(address)",
          "updateStrategyRegistry(address)",
          "deposit(uint256,address,address,address)",
          "switchStrategy(uint256,address,address,address)",
          "withdraw(uint256,address,address,address payable,bool)",
          "withdrawFrom(uint256,address,address,address,address payable,bool)",
          "withdrawAll(address)",
          "approve(uint256,address,address)",
          "increaseAllowance(uint256,address,address)",
          "decreaseAllowance(uint256,address,address)",
          "increaseAllowanceToCreditLine(uint256,address,address)",
          "transfer(uint256,address,address,address)",
          "transferFrom(uint256,address,address,address,address)",
          "getTotalTokens(address,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "SavingsAccount",
              "label": "strategyRegistry",
              "type": "t_address",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:24"
            },
            {
              "contract": "SavingsAccount",
              "label": "creditLine",
              "type": "t_address",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:29"
            },
            {
              "contract": "SavingsAccount",
              "label": "balanceInShares",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:35"
            },
            {
              "contract": "SavingsAccount",
              "label": "allowance",
              "type": "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))",
              "src": "contracts/SavingsAccount/SavingsAccount.sol:41"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_mapping(t_address,t_uint256)))": {
              "label": "mapping(address => mapping(address => mapping(address => uint256)))"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SavingsAccountUtil": {
        "src": "contracts/SavingsAccount/SavingsAccountUtil.sol:7",
        "version": {
          "withMetadata": "aab0aa014a55d9be04f62a0025ac762647b1432f4bb3ba901d6c59643612a981",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Verification": {
        "src": "contracts/Verification/Verification.sol:10",
        "version": {
          "withMetadata": "e3e49af85fa7770f5c4f2370b360f58024a9ed79d13a1c71fff6ca62f8c23d1e",
          "withoutMetadata": "41fcf246aba0d916281170497f5ea609baebc2c842f99224629cacacad1a2fb2",
          "linkedWithoutMetadata": "41fcf246aba0d916281170497f5ea609baebc2c842f99224629cacacad1a2fb2"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "IVerification",
          "Initializable"
        ],
        "libraries": [
          "ECDSA"
        ],
        "methods": [
          "initialize(address)",
          "addVerifier(address)",
          "removeVerifier(address)",
          "registerMasterAddress(address,bool)",
          "unregisterMasterAddress(address,address)",
          "linkAddress(bytes)",
          "unlinkAddress(address)",
          "isUser(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Verification",
              "label": "verifiers",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/Verification/Verification.sol:14"
            },
            {
              "contract": "Verification",
              "label": "masterAddresses",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/Verification/Verification.sol:19"
            },
            {
              "contract": "Verification",
              "label": "linkedAddresses",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/Verification/Verification.sol:24"
            }
          ],
          "types": {
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_address": {
              "label": "address"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AdminVerifier": {
        "src": "contracts/Verification/adminVerifier.sol:8",
        "version": {
          "withMetadata": "84bd716bde997254615f9ad6565cc3f5cf4ebfa6032c743d9a851219d766b72e",
          "withoutMetadata": "ceb995fc770911ec18a8b24e30caa7bb0813a5dc9d8ec3d0ff7d71a7a12eb011",
          "linkedWithoutMetadata": "ceb995fc770911ec18a8b24e30caa7bb0813a5dc9d8ec3d0ff7d71a7a12eb011"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "IVerifier",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "initialize(address,address)",
          "registerUser(address,string,bool)",
          "unregisterUser(address)",
          "updateVerification(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AdminVerifier",
              "label": "verification",
              "type": "t_contract(IVerification)18331",
              "src": "contracts/Verification/adminVerifier.sol:12"
            },
            {
              "contract": "AdminVerifier",
              "label": "userData",
              "type": "t_mapping(t_address,t_string_storage)",
              "src": "contracts/Verification/adminVerifier.sol:17"
            }
          ],
          "types": {
            "t_contract(IVerification)18331": {
              "label": "contract IVerification"
            },
            "t_mapping(t_address,t_string_storage)": {
              "label": "mapping(address => string)"
            },
            "t_address": {
              "label": "address"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IExtension": {
        "src": "contracts/interfaces/IExtension.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializePoolExtension(uint128)",
          "closePoolExtension()",
          "removeVotes(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPool": {
        "src": "contracts/interfaces/IPool.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLoanStatus()",
          "depositCollateral(uint256,bool)",
          "addCollateralInMarginCall(address,uint256,bool)",
          "withdrawBorrowedAmount()",
          "borrower()",
          "getMarginCallEndTime(address)",
          "getBalanceDetails(address)",
          "totalSupply()",
          "closeLoan()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPoolFactory": {
        "src": "contracts/interfaces/IPoolFactory.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "savingsAccount()",
          "owner()",
          "poolRegistry(address)",
          "priceOracle()",
          "extension()",
          "repaymentImpl()",
          "userRegistry()",
          "collectionPeriod()",
          "loanWithdrawalDuration()",
          "marginCallDuration()",
          "minBorrowFraction()",
          "liquidatorRewardFraction()",
          "poolCancelPenaltyMultiple()",
          "getProtocolFeeData()",
          "noStrategyAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IPriceOracle": {
        "src": "contracts/interfaces/IPriceOracle.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getLatestPrice(address,address)",
          "doesFeedExist(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IRepayment": {
        "src": "contracts/interfaces/IRepayment.sol:5",
        "inherit": [],
        "libraries": [],
        "methods": [
          "initializeRepayment(uint256,uint256,uint256,uint256,address)",
          "getTotalRepaidAmount(address)",
          "getInterestCalculationVars(address)",
          "getCurrentLoanInterval(address)",
          "instalmentDeadlineExtended(address)",
          "didBorrowerDefault(address)",
          "getGracePeriodFraction()",
          "getNextInstalmentDeadline(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ISavingsAccount": {
        "src": "contracts/interfaces/ISavingsAccount.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(uint256,address,address,address)",
          "switchStrategy(uint256,address,address,address)",
          "withdraw(uint256,address,address,address payable,bool)",
          "withdrawAll(address)",
          "approve(uint256,address,address)",
          "increaseAllowance(uint256,address,address)",
          "decreaseAllowance(uint256,address,address)",
          "transfer(uint256,address,address,address)",
          "transferFrom(uint256,address,address,address,address)",
          "balanceInShares(address,address,address)",
          "increaseAllowanceToCreditLine(uint256,address,address)",
          "withdrawFrom(uint256,address,address,address,address payable,bool)",
          "getTotalTokens(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStrategyRegistry": {
        "src": "contracts/interfaces/IStrategyRegistry.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "registry(address)",
          "getStrategies()",
          "addStrategy(address)",
          "removeStrategy(uint256)",
          "updateStrategy(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVerification": {
        "src": "contracts/interfaces/IVerification.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "isUser(address,address)",
          "registerMasterAddress(address,bool)",
          "unregisterMasterAddress(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IVerifier": {
        "src": "contracts/interfaces/IVerifier.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IYield": {
        "src": "contracts/interfaces/IYield.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "liquidityToken(address)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AaveLendingPool": {
        "src": "contracts/interfaces/Invest/AaveLendingPool.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit(address,uint256,address,uint16)",
          "withdraw(address,uint256,address)",
          "getReserveData(address)",
          "getAddressesProvider()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "DataTypes": {
        "src": "contracts/interfaces/Invest/DataTypes.sol:4",
        "version": {
          "withMetadata": "9d73c730dde5c53264987ed28552b0fd231295955095840acc731ed48af0ddee",
          "withoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8",
          "linkedWithoutMetadata": "aaa148c474cd10e1a6cd0a52c0b55f1aa9b7bb7b42d7f1cb5acaea4f42f04bc8"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICEther": {
        "src": "contracts/interfaces/Invest/ICEther.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "mint()",
          "repayBorrow()",
          "repayBorrowBehalf(address)",
          "liquidateBorrow(address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ICToken": {
        "src": "contracts/interfaces/Invest/ICToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "underlying()",
          "mint(uint256)",
          "redeem(uint256)",
          "liquidateBorrow(address,uint256,address)",
          "repayBorrow(uint256)",
          "repayBorrowBehalf(address,uint256)",
          "balanceOfUnderlying(address)",
          "exchangeRateCurrent()",
          "exchangeRateStored()",
          "supplyRatePerBlock()",
          "redeemUnderlying(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ILendingPoolAddressesProvider": {
        "src": "contracts/interfaces/Invest/ILendingPoolAddressesProvider.sol:11",
        "inherit": [],
        "libraries": [],
        "methods": [
          "getMarketId()",
          "setMarketId(string)",
          "setAddress(bytes32,address)",
          "setAddressAsProxy(bytes32,address)",
          "getAddress(bytes32)",
          "getLendingPool()",
          "setLendingPoolImpl(address)",
          "getLendingPoolConfigurator()",
          "setLendingPoolConfiguratorImpl(address)",
          "getLendingPoolCollateralManager()",
          "setLendingPoolCollateralManager(address)",
          "getPoolAdmin()",
          "setPoolAdmin(address)",
          "getEmergencyAdmin()",
          "setEmergencyAdmin(address)",
          "getPriceOracle()",
          "setPriceOracle(address)",
          "getLendingRateOracle()",
          "setLendingRateOracle(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IProtocolDataProvider": {
        "src": "contracts/interfaces/Invest/IProtocolDataProvider.sol:7",
        "inherit": [],
        "libraries": [],
        "methods": [
          "ADDRESSES_PROVIDER()",
          "getAllReservesTokens()",
          "getAllATokens()",
          "getReserveConfigurationData(address)",
          "getReserveData(address)",
          "getUserReserveData(address,address)",
          "getReserveTokensAddresses(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IScaledBalanceToken": {
        "src": "contracts/interfaces/Invest/IScaledBalanceToken.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "scaledBalanceOf(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IWETHGateway": {
        "src": "contracts/interfaces/Invest/IWETHGateway.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "depositETH(address,address,uint16)",
          "withdrawETH(uint256,address)",
          "getWETHAddress()",
          "getAWETHAddress()",
          "getLendingPoolAddress()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IyVault": {
        "src": "contracts/interfaces/Invest/IyVault.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "earn()",
          "depositAll()",
          "deposit(uint256)",
          "depositETH()",
          "withdrawAll()",
          "withdrawAllETH()",
          "harvest(address,uint256)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "getPricePerFullShare()",
          "balanceOf(address)",
          "setMin(uint256)",
          "min()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Token": {
        "src": "contracts/mocks/Token.sol:7",
        "version": {
          "withMetadata": "cc32f24d9f99c1780fa533696cdebe7f227a167fc0176b4593452d0f90c7d6c4",
          "withoutMetadata": "54f87d7b9d555fc0ee0c6c568f2922228f4a66f4971c11da77cbf4200142e136",
          "linkedWithoutMetadata": "54f87d7b9d555fc0ee0c6c568f2922228f4a66f4971c11da77cbf4200142e136"
        },
        "inherit": [
          "Ownable",
          "ERC20",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint256)",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Token",
            "src": "contracts/mocks/Token.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Controller": {
        "src": "contracts/mocks/yVault/Controller.sol:49",
        "version": {
          "withMetadata": "7566729f5bb66db1c2f67a5d2a8a32a4dfc5b9e743be99af5dfebe5ea45409b7",
          "withoutMetadata": "c6cdb2507b226bb7a5280453072cac937244b365977509b03128393a56c99c58",
          "linkedWithoutMetadata": "c6cdb2507b226bb7a5280453072cac937244b365977509b03128393a56c99c58"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "Address",
          "SafeMath"
        ],
        "methods": [
          "(address)",
          "setRewards(address)",
          "setStrategist(address)",
          "setSplit(uint256)",
          "setOneSplit(address)",
          "setGovernance(address)",
          "setVault(address,address)",
          "approveStrategy(address,address)",
          "revokeStrategy(address,address)",
          "setConverter(address,address,address)",
          "setStrategy(address,address)",
          "earn(address,uint256)",
          "balanceOf(address)",
          "withdrawAll(address)",
          "inCaseTokensGetStuck(address,uint256)",
          "inCaseStrategyTokenGetStuck(address,address)",
          "getExpectedReturn(address,address,uint256)",
          "yearn(address,address,uint256)",
          "withdraw(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Controller",
            "src": "contracts/mocks/yVault/Controller.sol:68"
          },
          {
            "kind": "state-variable-assignment",
            "name": "split",
            "src": "contracts/mocks/yVault/Controller.sol:65"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Controller",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:54"
            },
            {
              "contract": "Controller",
              "label": "strategist",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:55"
            },
            {
              "contract": "Controller",
              "label": "onesplit",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:57"
            },
            {
              "contract": "Controller",
              "label": "rewards",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Controller.sol:58"
            },
            {
              "contract": "Controller",
              "label": "vaults",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/mocks/yVault/Controller.sol:59"
            },
            {
              "contract": "Controller",
              "label": "strategies",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/mocks/yVault/Controller.sol:60"
            },
            {
              "contract": "Controller",
              "label": "converters",
              "type": "t_mapping(t_address,t_mapping(t_address,t_address))",
              "src": "contracts/mocks/yVault/Controller.sol:61"
            },
            {
              "contract": "Controller",
              "label": "approvedStrategies",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "contracts/mocks/yVault/Controller.sol:63"
            },
            {
              "contract": "Controller",
              "label": "split",
              "type": "t_uint256",
              "src": "contracts/mocks/yVault/Controller.sol:65"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_mapping(t_address,t_mapping(t_address,t_address))": {
              "label": "mapping(address => mapping(address => address))"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Converter": {
        "src": "contracts/mocks/yVault/Controller.sol:26",
        "inherit": [],
        "libraries": [],
        "methods": [
          "convert(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IStrategy": {
        "src": "contracts/mocks/yVault/Controller.sol:12",
        "inherit": [],
        "libraries": [],
        "methods": [
          "want()",
          "deposit()",
          "withdraw(address)",
          "withdraw(uint256)",
          "withdrawAll()",
          "balanceOf()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "OneSplitAudit": {
        "src": "contracts/mocks/yVault/Controller.sol:30",
        "inherit": [],
        "libraries": [],
        "methods": [
          "swap(address,address,uint256,uint256,uint256[],uint256)",
          "getExpectedReturn(address,address,uint256,uint256,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IController": {
        "src": "contracts/mocks/yVault/IController.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "vaults(address)",
          "strategies(address)",
          "rewards()",
          "approveStrategy(address,address)",
          "setStrategy(address,address)",
          "withdraw(address,uint256)",
          "balanceOf(address)",
          "earn(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Strategy": {
        "src": "contracts/mocks/yVault/Strategy.sol:25",
        "version": {
          "withMetadata": "da9e8b4a99409c129c14b806b43e028e094d07b2f501123606399c30f6a091f7",
          "withoutMetadata": "ec1932a7e3427c3c844c8153859817f9c7bbfc276ad67d17616e411ca9fd856f",
          "linkedWithoutMetadata": "ec1932a7e3427c3c844c8153859817f9c7bbfc276ad67d17616e411ca9fd856f"
        },
        "inherit": [],
        "libraries": [
          "SafeERC20",
          "Address",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "deposit()",
          "withdraw(address)",
          "withdraw(uint256)",
          "withdrawAll()",
          "balanceOf()",
          "setGovernance(address)",
          "setController(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Strategy",
            "src": "contracts/mocks/yVault/Strategy.sol:35"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Strategy",
              "label": "want",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:30"
            },
            {
              "contract": "Strategy",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:31"
            },
            {
              "contract": "Strategy",
              "label": "controller",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:32"
            },
            {
              "contract": "Strategy",
              "label": "strategist",
              "type": "t_address",
              "src": "contracts/mocks/yVault/Strategy.sol:33"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Detailed": {
        "src": "contracts/mocks/yVault/yVault.sol:115",
        "version": {
          "withMetadata": "5db19315a6d4492d8dec9301311106c136aa54fa3d76c2806696d977121c5b44",
          "withoutMetadata": "a5ba1549c6c998ce893e168ef20cfd6d94b1536387efba8cf43d9f37507d77ea",
          "linkedWithoutMetadata": "a5ba1549c6c998ce893e168ef20cfd6d94b1536387efba8cf43d9f37507d77ea"
        },
        "inherit": [
          "ERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string,uint8)",
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20Detailed",
            "src": "contracts/mocks/yVault/yVault.sol:120"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Detailed",
              "label": "_name",
              "type": "t_string_storage",
              "src": "contracts/mocks/yVault/yVault.sol:116"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "contracts/mocks/yVault/yVault.sol:117"
            },
            {
              "contract": "ERC20Detailed",
              "label": "_decimals",
              "type": "t_uint8",
              "src": "contracts/mocks/yVault/yVault.sol:118"
            }
          ],
          "types": {
            "t_string_storage": {
              "label": "string"
            },
            "t_uint8": {
              "label": "uint8"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "WETH": {
        "src": "contracts/mocks/yVault/yVault.sol:206",
        "inherit": [],
        "libraries": [],
        "methods": [
          "deposit()",
          "withdraw(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "yVault": {
        "src": "contracts/mocks/yVault/yVault.sol:215",
        "version": {
          "withMetadata": "3bf23ddcd916960b96269c869235c90c377e5fb122d43b7a2c0abb3c79fb6ba0",
          "withoutMetadata": "2584a92bd2ed8754c64ff7834990afd47a3a7980dae1a7835b2869d5cdf02110",
          "linkedWithoutMetadata": "2584a92bd2ed8754c64ff7834990afd47a3a7980dae1a7835b2869d5cdf02110"
        },
        "inherit": [
          "ERC20Detailed",
          "ERC20",
          "Context"
        ],
        "libraries": [
          "SafeERC20",
          "Address",
          "SafeMath"
        ],
        "methods": [
          "(address,address)",
          "balance()",
          "setMin(uint256)",
          "setGovernance(address)",
          "setController(address)",
          "available()",
          "earn()",
          "depositAll()",
          "deposit(uint256)",
          "depositETH()",
          "withdrawAll()",
          "withdrawAllETH()",
          "harvest(address,uint256)",
          "withdraw(uint256)",
          "withdrawETH(uint256)",
          "getPricePerFullShare()",
          "()"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "yVault",
            "src": "contracts/mocks/yVault/yVault.sol:228"
          },
          {
            "kind": "state-variable-assignment",
            "name": "min",
            "src": "contracts/mocks/yVault/yVault.sol:222"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "yVault",
              "label": "token",
              "type": "t_contract(ERC20)20615",
              "src": "contracts/mocks/yVault/yVault.sol:220"
            },
            {
              "contract": "yVault",
              "label": "min",
              "type": "t_uint256",
              "src": "contracts/mocks/yVault/yVault.sol:222"
            },
            {
              "contract": "yVault",
              "label": "governance",
              "type": "t_address",
              "src": "contracts/mocks/yVault/yVault.sol:225"
            },
            {
              "contract": "yVault",
              "label": "controller",
              "type": "t_address",
              "src": "contracts/mocks/yVault/yVault.sol:226"
            }
          ],
          "types": {
            "t_contract(ERC20)20615": {
              "label": "contract ERC20"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AaveYield": {
        "src": "contracts/yield/AaveYield.sol:20",
        "version": {
          "withMetadata": "4f235b558dd0be6846950458189e81d72f11b4f425ac07ed435230bbb851744c",
          "withoutMetadata": "310046a3bad6b2c31e1bf64519335d34ba0ed88d372af4d2f05b94ee3e08d5d4",
          "linkedWithoutMetadata": "310046a3bad6b2c31e1bf64519335d34ba0ed88d372af4d2f05b94ee3e08d5d4"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable,address,address,address)",
          "liquidityToken(address)",
          "updateSavingsAccount(address payable)",
          "updateAaveAddresses(address,address,address)",
          "updateReferralCode(uint16)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "AaveYield",
              "label": "wethGateway",
              "type": "t_address",
              "src": "contracts/yield/AaveYield.sol:27"
            },
            {
              "contract": "AaveYield",
              "label": "protocolDataProvider",
              "type": "t_address",
              "src": "contracts/yield/AaveYield.sol:32"
            },
            {
              "contract": "AaveYield",
              "label": "lendingPoolAddressesProvider",
              "type": "t_address",
              "src": "contracts/yield/AaveYield.sol:37"
            },
            {
              "contract": "AaveYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/AaveYield.sol:42"
            },
            {
              "contract": "AaveYield",
              "label": "referralCode",
              "type": "t_uint16",
              "src": "contracts/yield/AaveYield.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_address_payable": {
              "label": "address payable"
            },
            "t_uint16": {
              "label": "uint16"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CompoundYield": {
        "src": "contracts/yield/CompoundYield.sol:18",
        "version": {
          "withMetadata": "70cfb4102a815ba6f0899a18245c53cd29d9f8d9c8a7bae38dd4f51ef7cada1b",
          "withoutMetadata": "18956afb4fcdb64ad89e60d3bdb498a2a05a12fd3340039189198532f8750dc3",
          "linkedWithoutMetadata": "18956afb4fcdb64ad89e60d3bdb498a2a05a12fd3340039189198532f8750dc3"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable)",
          "updateSavingsAccount(address payable)",
          "updateProtocolAddresses(address,address)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "CompoundYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/CompoundYield.sol:25"
            },
            {
              "contract": "CompoundYield",
              "label": "liquidityToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/yield/CompoundYield.sol:30"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "NoYield": {
        "src": "contracts/yield/NoYield.sol:16",
        "version": {
          "withMetadata": "73e5d2a5a9c4aaa99069587ab20051da95b0ded7f7ea80cf90255c42298cb3bc",
          "withoutMetadata": "79903c67818b7debff445020182e24e96d387dc55356baba21164f21395b62ab",
          "linkedWithoutMetadata": "79903c67818b7debff445020182e24e96d387dc55356baba21164f21395b62ab"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable)",
          "liquidityToken(address)",
          "updateSavingsAccount(address payable)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "NoYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/NoYield.sol:23"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "StrategyRegistry": {
        "src": "contracts/yield/StrategyRegistry.sol:9",
        "version": {
          "withMetadata": "3f63550107e42466c1a8c3e267b76bfd60c1e1958ccc442c5e4e79d858e13398",
          "withoutMetadata": "218e8737405d16bfc882b2fea7c34ac3aca578a7f1b7332b74e038a7449912c0",
          "linkedWithoutMetadata": "218e8737405d16bfc882b2fea7c34ac3aca578a7f1b7332b74e038a7449912c0"
        },
        "inherit": [
          "IStrategyRegistry",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeMath"
        ],
        "methods": [
          "initialize(address,uint256)",
          "updateMaxStrategies(uint256)",
          "getStrategies()",
          "addStrategy(address)",
          "removeStrategy(uint256)",
          "updateStrategy(uint256,address,address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "StrategyRegistry",
              "label": "strategies",
              "type": "t_array(t_address)dyn_storage",
              "src": "contracts/yield/StrategyRegistry.sol:15"
            },
            {
              "contract": "StrategyRegistry",
              "label": "maxStrategies",
              "type": "t_uint256",
              "src": "contracts/yield/StrategyRegistry.sol:20"
            },
            {
              "contract": "StrategyRegistry",
              "label": "registry",
              "type": "t_mapping(t_address,t_bool)",
              "src": "contracts/yield/StrategyRegistry.sol:25"
            }
          ],
          "types": {
            "t_array(t_address)dyn_storage": {
              "label": "address[]"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "YearnYield": {
        "src": "contracts/yield/YearnYield.sol:17",
        "version": {
          "withMetadata": "fd05351455c3198f21a6f62a02b3c215aa419a81107cf6a85e54b39e76d6e042",
          "withoutMetadata": "15ec67141a228484deb76e8dab142013fb640ee6b32ef80b948bd9b11a3dd015",
          "linkedWithoutMetadata": "15ec67141a228484deb76e8dab142013fb640ee6b32ef80b948bd9b11a3dd015"
        },
        "inherit": [
          "ReentrancyGuard",
          "OwnableUpgradeable",
          "ContextUpgradeable",
          "Initializable",
          "IYield"
        ],
        "libraries": [
          "SafeERC20",
          "SafeMath"
        ],
        "methods": [
          "initialize(address,address payable)",
          "updateSavingsAccount(address payable)",
          "updateProtocolAddresses(address,address)",
          "emergencyWithdraw(address,address payable)",
          "lockTokens(address,address,uint256)",
          "unlockTokens(address,uint256)",
          "unlockShares(address,uint256)",
          "getTokensForShares(uint256,address)",
          "getSharesForTokens(uint256,address)",
          "()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "YearnYield",
              "label": "savingsAccount",
              "type": "t_address_payable",
              "src": "contracts/yield/YearnYield.sol:24"
            },
            {
              "contract": "YearnYield",
              "label": "liquidityToken",
              "type": "t_mapping(t_address,t_address)",
              "src": "contracts/yield/YearnYield.sol:29"
            }
          ],
          "types": {
            "t_address_payable": {
              "label": "address payable"
            },
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}