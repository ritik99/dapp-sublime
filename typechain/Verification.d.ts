/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface VerificationInterface extends ethers.utils.Interface {
  functions: {
    "addVerifier(address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "isUser(address,address)": FunctionFragment;
    "linkAddress(bytes)": FunctionFragment;
    "linkedAddresses(address)": FunctionFragment;
    "masterAddresses(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "registerMasterAddress(address,bool)": FunctionFragment;
    "removeVerifier(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unlinkAddress(address)": FunctionFragment;
    "unregisterMasterAddress(address,address)": FunctionFragment;
    "verifiers(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addVerifier", values: [string]): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isUser",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "linkAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "linkedAddresses",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "masterAddresses",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerMasterAddress",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeVerifier",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlinkAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unregisterMasterAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "verifiers", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "linkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linkedAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "masterAddresses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerMasterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlinkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unregisterMasterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifiers", data: BytesLike): Result;

  events: {
    "AddressLinked(address,address)": EventFragment;
    "AddressUnlinked(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UserRegistered(address,address,bool)": EventFragment;
    "UserUnregistered(address,address,address)": EventFragment;
    "VerifierAdded(address)": EventFragment;
    "VerifierRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressLinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AddressUnlinked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserUnregistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierRemoved"): EventFragment;
}

export class Verification extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: VerificationInterface;

  functions: {
    addVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addVerifier(address)"(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isUser(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isUser(address,address)"(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    linkAddress(
      _approval: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "linkAddress(bytes)"(
      _approval: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linkedAddresses(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "linkedAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    masterAddresses(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "masterAddresses(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    registerMasterAddress(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerMasterAddress(address,bool)"(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeVerifier(address)"(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlinkAddress(
      _linkedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlinkAddress(address)"(
      _linkedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unregisterMasterAddress(
      _masterAddress: string,
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unregisterMasterAddress(address,address)"(
      _masterAddress: string,
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifiers(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "verifiers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  addVerifier(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addVerifier(address)"(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "initialize(address)"(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isUser(
    _user: string,
    _verifier: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isUser(address,address)"(
    _user: string,
    _verifier: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  linkAddress(
    _approval: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "linkAddress(bytes)"(
    _approval: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linkedAddresses(arg0: string, overrides?: CallOverrides): Promise<string>;

  "linkedAddresses(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  masterAddresses(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "masterAddresses(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  registerMasterAddress(
    _masterAddress: string,
    _isMasterLinked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerMasterAddress(address,bool)"(
    _masterAddress: string,
    _isMasterLinked: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeVerifier(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeVerifier(address)"(
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlinkAddress(
    _linkedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlinkAddress(address)"(
    _linkedAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unregisterMasterAddress(
    _masterAddress: string,
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unregisterMasterAddress(address,address)"(
    _masterAddress: string,
    _verifier: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifiers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "verifiers(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    addVerifier(_verifier: string, overrides?: CallOverrides): Promise<void>;

    "addVerifier(address)"(
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(_admin: string, overrides?: CallOverrides): Promise<void>;

    "initialize(address)"(
      _admin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isUser(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isUser(address,address)"(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    linkAddress(_approval: BytesLike, overrides?: CallOverrides): Promise<void>;

    "linkAddress(bytes)"(
      _approval: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    linkedAddresses(arg0: string, overrides?: CallOverrides): Promise<string>;

    "linkedAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    masterAddresses(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "masterAddresses(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    registerMasterAddress(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "registerMasterAddress(address,bool)"(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeVerifier(_verifier: string, overrides?: CallOverrides): Promise<void>;

    "removeVerifier(address)"(
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unlinkAddress(
      _linkedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unlinkAddress(address)"(
      _linkedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unregisterMasterAddress(
      _masterAddress: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "unregisterMasterAddress(address,address)"(
      _masterAddress: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifiers(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "verifiers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    AddressLinked(
      linkedAddress: string | null,
      masterAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { linkedAddress: string; masterAddress: string }
    >;

    AddressUnlinked(
      linkedAddress: string | null,
      masterAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { linkedAddress: string; masterAddress: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    UserRegistered(
      masterAddress: string | null,
      verifier: string | null,
      isMasterLinked: boolean | null
    ): TypedEventFilter<
      [string, string, boolean],
      { masterAddress: string; verifier: string; isMasterLinked: boolean }
    >;

    UserUnregistered(
      masterAddress: string | null,
      verifier: string | null,
      unregisteredBy: string | null
    ): TypedEventFilter<
      [string, string, string],
      { masterAddress: string; verifier: string; unregisteredBy: string }
    >;

    VerifierAdded(
      verifier: string | null
    ): TypedEventFilter<[string], { verifier: string }>;

    VerifierRemoved(
      verifier: string | null
    ): TypedEventFilter<[string], { verifier: string }>;
  };

  estimateGas: {
    addVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addVerifier(address)"(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isUser(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isUser(address,address)"(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linkAddress(
      _approval: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "linkAddress(bytes)"(
      _approval: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "linkedAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    masterAddresses(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "masterAddresses(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerMasterAddress(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerMasterAddress(address,bool)"(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeVerifier(address)"(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlinkAddress(
      _linkedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlinkAddress(address)"(
      _linkedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unregisterMasterAddress(
      _masterAddress: string,
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unregisterMasterAddress(address,address)"(
      _masterAddress: string,
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifiers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "verifiers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addVerifier(address)"(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "initialize(address)"(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isUser(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isUser(address,address)"(
      _user: string,
      _verifier: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linkAddress(
      _approval: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "linkAddress(bytes)"(
      _approval: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linkedAddresses(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "linkedAddresses(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    masterAddresses(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "masterAddresses(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerMasterAddress(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerMasterAddress(address,bool)"(
      _masterAddress: string,
      _isMasterLinked: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeVerifier(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeVerifier(address)"(
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlinkAddress(
      _linkedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlinkAddress(address)"(
      _linkedAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unregisterMasterAddress(
      _masterAddress: string,
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unregisterMasterAddress(address,address)"(
      _masterAddress: string,
      _verifier: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifiers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifiers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
